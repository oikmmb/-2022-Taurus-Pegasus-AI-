
import torchvision.transforms as T
import torchvision
import numpy as np
import cv2
import operator



def solve2(src):
    s = {}

    gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)#灰度
    _, binary = cv2.threshold(gray, 200, 200, type=cv2.THRESH_BINARY)#二值化
    contours = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]#找边框
    for i in range(len(contours)):
        block_rect = cv2.boundingRect(contours[i])#得到边框坐标
        s[i]= block_rect[2]*block_rect[3]#每个边框面积
        cv2.rectangle(src, (block_rect[0], block_rect[1]), (block_rect[0]+block_rect[2], block_rect[1]+block_rect[3]), (255, 0, 0), 3)
        cv2.imwrite('3.jpg',src)
    # s[0]=0
    max1 = max(s.items(), key=operator.itemgetter(1))[0]#找到最大边框
    x, y, w, h = cv2.boundingRect(contours[max1])

    img_cut = src[y+70:y+h-50, x+40:x+w-50]#裁剪


    cv2.imwrite('2.jpg', img_cut)
    return img_cut




def detect_color(image, color): #颜色检测模块
    color_dist = {
        'green': {'Lower': np.array([35, 43, 46]), 'Upper': np.array([99, 255, 255])},
        'yellow': {'Lower': np.array([26, 43, 46]), 'Upper': np.array([34, 255, 255])},
        'red': {'Lower': np.array([0, 60, 60]), 'Upper': np.array([6, 255, 255])},
    }

    gs = cv2.GaussianBlur(image, (5, 5), 0)
    hsv = cv2.cvtColor(gs, cv2.COLOR_BGR2HSV)
    erode_hsv = cv2.erode(hsv, None)
    inRange_hsv = cv2.inRange(erode_hsv, color_dist[color]['Lower'], color_dist[color]['Upper'])
    cv2.imwrite('0000.jpg', inRange_hsv)
    if np.mean(inRange_hsv)!=0:
        print("检测成功，绿码！！")
    else:
        print("非绿码！")








model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()
COCO_INSTANCE_CATEGORY_NAMES = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A', 'stop sign',
    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
    'elephant', 'bear', 'zebra', 'giraffe', 'N/A', 'backpack', 'umbrella', 'N/A', 'N/A',
    'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
    'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
    'bottle', 'N/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl',
    'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N/A', 'dining table',
    'N/A', 'N/A', 'toilet', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N/A', 'book',
    'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]
def get_prediction(img, threshold):

    transform = T.Compose([T.ToTensor()])
    img = transform(img)

    pred = model([img])

    pred_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(pred[0]['labels'].numpy())]
    pred_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(pred[0]['boxes'].detach().numpy())]
    pred_score = list(pred[0]['scores'].detach().numpy())
    pred_t = [pred_score.index(x) for x in pred_score if x > threshold][-1]
    pred_boxes = pred_boxes[:pred_t+1]
    pred_class = pred_class[:pred_t+1]
    print("pred_class:",pred_class)
    print("pred_boxes:",pred_boxes)
    return pred_boxes, pred_class

def object_detection_api(img, threshold=0.5, rect_th=3, text_size=3, text_th=3):
    boxes, pred_cls = get_prediction(img, threshold)


    cv2.imwrite('5454.jpg', img)
    for i in range(len(boxes)):
        x = int(boxes[i][0][0])
        y = int(boxes[i][0][1])
        w = int(boxes[i][1][0])
        h = int(boxes[i][1][1])
        cv2.rectangle(img, (x, y), (w, h), color=(0, 255, 0), thickness=rect_th)
        cv2.putText(img, pred_cls[i], (x, y),  cv2.FONT_HERSHEY_SIMPLEX, text_size, (0,255,0),thickness=text_th)
        if('cell phone' in pred_cls[i]):
            src1 = img[y:h, x: w]
            src2=cv2.resize(src1, (230,400))
            scr2 = cv2.cvtColor(src2, cv2.COLOR_BGR2RGB)
            cv2.imwrite("img" + str(i)+".jpg", src2 )
            col = 'green'
            img_cut1 = solve2(src2)

            detect_color(img_cut1, col)


def VideoCaputer():
    cap = cv2.VideoCapture(0)
    while(cap.isOpened()):
        ret, frame = cap.read()

        cv2.imshow('1', frame)
        cv2.waitKey(1)
        object_detection_api(frame)


VideoCaputer()



